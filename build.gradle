/*
 * Copyright 2008-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.text.SimpleDateFormat

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
  }
}

plugins {
  id "com.github.hierynomus.license" version "0.11.0"
  id 'net.researchgate.release' version '2.5.0'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.ben-manes.versions'

version = project.version
group = project.group

sourceCompatibility = project.javaVersion
targetCompatibility = project.javaVersion

repositories {
  jcenter()
}

dependencies {
  compile 'io.dropwizard.metrics:metrics-healthchecks:3.1.2'
  compile 'com.netflix.hystrix:hystrix-core:1.5.9'

  testCompile 'junit:junit:4.12'
}

Date buildTimeAndDate = new Date()
ext {
  buildDate = new SimpleDateFormat('dd-MMM-yyyy').format(buildTimeAndDate)
  buildTime = new SimpleDateFormat('hh:mm aa').format(buildTimeAndDate)
}

def jarManifestAttributes = [
  'Built-By'  : System.properties['user.name'],
  'Created-By': System.properties['java.version'] + ' (' + System.properties['java.vendor'] + ' ' + System.getProperty("java.vm.version") + ")",
  'Build-Date': buildDate,
  'Build-Time': buildTime]

jar {
  manifest {
    attributes(jarManifestAttributes)
  }
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
}

license {
  header rootProject.file('HEADER_LICENSE')
  strictCheck true
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      it.pom.getRuntimeDependencies().clear()

      artifact sourcesJar

      pom.withXml {
        def root = asNode()
        root.appendNode('name', project.name)
        root.appendNode('description', project.description)
        root.appendNode('url', 'https://github.com/CirculoSiete/datasource-metrics-health-check')
        root.appendNode('inceptionYear', '2017')

        def scm = root.appendNode('scm')
        scm.appendNode('url', 'https://github.com/CirculoSiete/datasource-metrics-health-check')
        scm.appendNode('connection', 'scm:https://domix@github.com/CirculoSiete/datasource-metrics-health-check.git')
        scm.appendNode('developerConnection', 'scm:git@github.com:CirculoSiete/datasource-metrics-health-check.git')

        def license = root.appendNode('licenses').appendNode('license')
        license.appendNode('name', 'The Apache Software License, Version 2.0')
        license.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
        license.appendNode('distribution', 'repo')

        def developers = root.appendNode('developers')
        def domix = developers.appendNode('developer')
        domix.appendNode('id', 'domix')
        domix.appendNode('name', 'Domingo Suarez Torres')
        domix.appendNode('email', 'domingo.suarez@gmail.com')
      }
    }
  }
}

bintray {
  user = project.hasProperty('bintrayUsername') ? bintrayUsername : ''
  key = project.hasProperty('bintrayApiKey') ? bintrayApiKey : ''

  publications = ['mavenJava']
  dryRun = false //Whether to run this as dry-run, without deploying
  publish = true //If version should be auto published after an upload
  pkg {
    repo = 'oss'
    userOrg = 'circulosiete'
    name = project.name
    desc = project.description
    websiteUrl = 'https://github.com/CirculoSiete/datasource-metrics-health-check'
    issueTrackerUrl = 'https://github.com/CirculoSiete/datasource-metrics-health-check/issues'
    vcsUrl = 'https://github.com/CirculoSiete/datasource-metrics-health-check.git'
    licenses = ['Apache-2.0']
    labels = ['metrics', 'metrics-healthchecks', 'dropwizard', 'healthchecks']
    publicDownloadNumbers = true
    attributes = [:]
    //Optional version descriptor
    version {
      name = project.version
      desc = project.description
      gpg {
        sign = project.hasProperty('bintrayGpgPassphrase')
        passphrase = project.hasProperty('bintrayGpgPassphrase') ? bintrayGpgPassphrase : ''
      }
      mavenCentralSync {
        sync = false
        user = ''
        password = ''
        close = '1'
      }
    }
  }
}

createReleaseTag.dependsOn bintrayUpload
